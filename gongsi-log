1.查看fb fixbit
cat /sys/class/graphics/fb1/bits_per_pixel

setenv pridis "video=mxcfb0:dev=ldb,if=RGB24,fbpix=RGB32"
setenv secdis "video=mxcfb1:dev=ldb,if=RGB24,fbpix=RGB32"
setenv pridis "video=mxcfb0:dev=ldb,if=RGB24"
setenv secdis "video=mxcfb1:dev=ldb,if=RGB24"
setenv pridis "video=mxcfb0:dev=ldb"
本机内核构建
export ARCH=arm
export CROSS_COMPILE=/home/z/zty/a9/kernel/gcc/linux-x86/arm/gcc-linaro-7.5.0-arm-linux-gnueabi/bin/arm-linux-gnueabi-

添加gcc5

deb https://mirrors.aliyun.com/ubuntu/ xenial main universe
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 40976EAF437D05B5
sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-keys 3B4FE6ACC0B21F32

sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-5 5 --slave /usr/bin/g++ g++ /usr/bin/g++-5 
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 11 --slave /usr/bin/g++ g++ /usr/bin/g++-11
sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9 --slave /usr/bin/g++ g++ /usr/bin/g++-9

MACHINE=imx6dlsabresd source fsl-setup-release.sh -b build-fb -e fb
MACHINE=imx6dlsabresd source fsl-setup-release.sh -b build-wayland -e wayland
sudo update-alternatives --install /usr/bin/python python /usr/bin/python2 27
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3 31

sed -i 's/IO_ftrylockfile/IO_EOF_SEEN/' lib/*.c
echo "#define _IO_IN_BACKUP 0x100" >> lib/stdio-impl.h


Richard Tollerton
7/07/15   #25363   
Message-ID: <87wpycy88v.fsf@...>
MIME-Version: 1.0
Content-Type: text/plain
--text follows this line--
The build of cross-localedef-native is observed to fail under gcc5 hosts
with multiple definition errors, e.g.:

argp-help.o: In function `argp_fmtstream_write':
argp-help.c:(.text+0x1da0): multiple definition of `argp_fmtstream_write'
argp-fmtstream.o:argp-fmtstream.c:(.text+0x7a0): first defined here

The problem is the change of the default C standard from gnu89 to gnu11
which changes the semantics of 'inline'. The issue is described in the
Porting guide at https://gcc.gnu.org/gcc-5/porting_to.html. Adding the
'-fgnu89-inline' option fixes the issue.

(This fix, including the above explanation, was shamelessly copied from
http://git.vahanus.net/?p=csc/ptxdist-kp.git;a=commit;h=2f04a3587bd33c74ccc9be6e115a8b1fde620841.)

Signed-off-by: Richard Tollerton <rich.tollerton@...>
---
 meta/recipes-core/glibc/cross-localedef-native_2.20.bb | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/meta/recipes-core/glibc/cross-localedef-native_2.20.bb b/meta/recipes-core/glibc/cross-localedef-native_2.20.bb
index ccf56a9..38f2af4 100644
--- a/meta/recipes-core/glibc/cross-localedef-native_2.20.bb
+++ b/meta/recipes-core/glibc/cross-localedef-native_2.20.bb
@@ -39,7 +39,7 @@ SRCREV_localedef = "c833367348d39dad7ba018990bfdaffaec8e9ed3"
 S = "${WORKDIR}/git"
 
 EXTRA_OECONF = "--with-glibc=${S}"
-CFLAGS += "-DNOT_IN_libc=1"
+CFLAGS += "-DNOT_IN_libc=1 -fgnu89-inline"
 
 do_configure () {
 	${S}/localedef/configure ${EXTRA_OECONF}
 	
 opensll
 $openssl" x509 $hashopt -fingerprint -noout -in "$fname" -passin pass:'\n	
 
 subversion错误
 swig.m4 159行后三行删除
 CPPFLAGS="$SVN_PYCFMT_SAVE_CPPFLAGS"
 
 BUILD_LDFLAGS_prepend_pn-qemu-native = "-Wl,-rpath-link,/lib/x86_64-linux-gnu "
 
 libgpg-error-1.33
 找到libgpg-error-1.33编译包的位置，并分别找到这几个文件：
libgpg-error-1.33/lang/cl/mkerrcodes.awk
libgpg-error-1.33/src/mkerrcodes.awk
libgpg-error-1.33/src/mkerrcodes1.awk
libgpg-error-1.33/src/mkerrcodes2.awk
libgpg-error-1.33/src/mkerrnos.awk
libgpg-error-1.33/src/mkstrtable.awk
并分别打开找到如下代码：

!header {
  sub (/\#.+/, "");
1
2
将上诉所有文件中的所有"sub (/#.+/, “”);"，改为：“sub (/#.+/, “”);”，也就是说最新的gawk能够识别到’#'号不需要使用转义字符（‘\‘）的帮助

最后找到，如下几个文件：
libgpg-error-1.33/src/Makefile
libgpg-error-1.33/src/Makefile.am
libgpg-error-1.33/src/Makefile.in
libgpg-error-1.33/src/mkstrtable.awk
namespace 替换为pkg_namespace
qemu-native
typedef struct ucontext
{
        unsigned long int uc_flags;
        struct ucontext *uc_link;
        __sigset_t uc_sigmask;
        stack_t uc_stack;
        mcontext_t uc_mcontext;
        long int uc_filler[5];
};
gettid()修改为
sys_gettid();
 
#ifdef TARGET_NR_stime /* not on alpha */
       case TARGET_NR_stime:
             {
                  time_t host_time;
                  if (get_user_sal(host_time, argl))
                       return -TARGET_EFAULT;
                struct timespec res;
                res.tv_sec = host_time;
                return get_errno(clock_settime(CLOCK_REALTIME, &res));
             }
#endif

            struct timespec res;
            res.tv_sec = host_time;
            ret = get_errno(clock_settime(CLOCK_REALTIME, &res));
            
文件系统：
bitbake -c compile -f u-boot-imx; bitbake -f u-boot-imx
新h264解码
ffplay -rtsp_transport tcp rtsp://192.168.168.168/0
ffplay -rtsp_transport tcp rtsp://192.168.2.230:554/main
gst-launch-1.0 rtspsrc location=rtsp://192.168.2.230:554/main latency=8  ! rtph264depay ! vpudec ! autovideosink sync=false
gst-launch-1.0 rtspsrc location=rtsp://192.168.168.168/0 latency=8  ! rtph264depay ! vpudec ! autovideosink sync=false

老的
 Stream #0:0: Video: h264 (High), yuv420p(tv, bt709, progressive), 1920x1080, 30 fps, 29.97 tbr, 90k tbn, 60 tbc
  Stream #0:1: Audio: aac (LC), 48000 Hz, stereo, fltp
   3.12 A-V: -0.422 fd=   0 aq=   55KB vq=  197KB sq=    0B f=1/1   
新的h264解码
  Duration: N/A, start: 0.000000, bitrate: N/A
  Stream #0:0: Video: h264 (Main), yuvj420p(pc, bt709, progressive), 1920x1080, 59.94 tbr, 90k tbn, 180k tbc
  Stream #0:1: Audio: aac (LC), 48000 Hz, stereo, fltp
  
  bear 使用
  bear -- make zImage  -j8
  bear --library /usr/lib/x86_64-linux-gnu/bear/libexec.so -- make zImage -j12
  glibc版本很
  strings /opt/poky/1.7/sysroots/x86_64-pokysdk-linux/usr/bin/arm-poky-linux-gnueabi/../../../lib/libc.so.6 | grep ^GLIBC
  
   bear -l /usr/lib/x86_64-linux-gnu/bear/libear.so make zImage -j8
   
   bear -l /usr/lib/x86_64-linux-gnu/bear/libear.so make ARCH=arm CROSS_CMOPILE=arm-linux-gnueabi- zImage  -j 32

--compile-commands-dir=${workspaceFolder}
--background-index
--completion-style=detailed
--header-insertion=never
-log=info

vnc设置密码
 /opt/x11vnc -storepasswd
 
/proc/config.gz

gst-launch-1.0  filesrc location=/opt/Airplay.264 ! h264parse ! vpudec  ! overlaysink sync=false async=false
gst-launch-1.0 playbin uri=file:///opt/Airplay.264

gst-launch-1.0 -v rtspsrc location=rtsp://192.168.168.168/0 ! rtph264depay ! vpudec ! autovideosink 

gst-launch filesrc location=opt/Airplay.264 typefind=true ! vpudec ! mfw_v4lsink
gst-launch-1.0 -v  playbin uri=rtsp://192.168.168.168/0
gst-launch-0.10
gst-launch-1.0 rtspsrc location=rtsp://192.168.168.168/0 ! rtph264depay ! vpudec ! overlaysink

网络挂载文件系统
setenv serverip '192.168.1.199'
setenv nfsroot '/home/z/zty/hmnew/qttest/qt4e-demo-image3'
setenv nfsroot '/home/z/zty/hmnew/qttest/fsl-image-qt5'
setenv nfsroot '/home/z/zty/hmnew/qttest/fsl-image-314'
setenv nfsroot '/home/z/zty/hmnew/qttest/qt-h264'
setenv bootcmd_mmcnet 'mmc dev ${mmcdev};run loadimage;run bootcmd_nfs;run loadfdt;bootz ${loadaddr} - ${fdt_addr}'
setenv bootcmd_nfs 'setenv bootargs console=${console},${baudrate} root=/dev/nfs rootwait rw ${pridis} ${secdis} ip=${ipaddr} nfsroot=${serverip}:${nfsroot},v3,tcp'

gst-launch-1.0 -v rtspsrc location=rtsp://192.168.1.168/0 ! rtph264depay ! vpudec ! autovideosink 
gst-launch-1.0 rtspsrc location=rtsp://192.168.1.168/0 latency=8  ! rtph264depay ! vpudec ! autovideosink sync=false
gst-launch-1.0 rtspsrc location=rtsp://192.168.1.168/0 protocols=tcp ! rtph264depay ! vpudec ! autovideosink sync=false
gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0 latency=200000 drop-on-latency=TRUE ! rtph264depay ! vpudec ! autovideosink sync=false
gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0 latency=8 ! rtph264depay ! vpudec ! autovideosink sync=false

ffplay -rtsp_transport tcp rtsp://169.254.1.168/0
ffplay -rtsp_transport tcp rtsp://192.168.1.168/0
网络查看命令
ethtool -S eth0
find  /sys -name eth0
configs问题
CONFIG_IKCONFIG=y
CONFIG_IKCONFIG_PROC=y
待测试

echo performance > /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor
负载均衡
drivers/cpufreq/cpufreq_interactive.c cpufreq_interactive_init函数。

多cpu指定
echo 2 > /proc/irq/142/smp_affinity

echo 2 > /proc/irq/104/smp_affinity

git remote add origingithub https://github.com/ztyhalo/256-imx.git
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


#undef NR_OPEN
#define INR_OPEN_CUR 50000	/* Initial setting for nfile rlimits */
#define INR_OPEN_MAX 50000	/* Hard limit for nfile rlimits */


static int irq_thread(void *data)
{
    /* 'data' 参数包含中断描述符的指针，其中包括中断处理程序信息 */
    struct irq_desc *desc = data;
    struct irqaction *action = desc->action;

    /* 获取线程化中断处理程序的指针 */
    irqreturn_t (*handler)(int, void *) = action->handler;
    irqreturn_t ret;

    /* 无限循环，直到收到线程停止信号 */
    while (!kthread_should_stop()) {
        /* 等待硬中断处理程序唤醒本线程
         * 当硬中断处理程序返回 IRQ_WAKE_THREAD 时，会将 'desc->irqs_queued' 计数器递增。
         * 这个线程会等待计数器变为非零值。 */
        wait_event_interruptible(desc->wait_for_irq, desc->irqs_queued);

        /* 调用线程化中断处理程序处理中断 */
        ret = handler(action->irq, action->dev_id);

        /* 中断处理完成后，检查处理程序是否正确处理了中断 */
        if (ret == IRQ_HANDLED) {
            /* 如果线程化中断处理程序返回 IRQ_HANDLED，表示中断已被正确处理。
             * 这时，我们递减 'desc->irqs_queued' 计数器。 */
            atomic_dec(&desc->irqs_queued);
        }
    }

    /* 线程正常退出，返回 0 */
    return 0;
}

glpat-v-BaLxBiVKzFSexGrSVP

YOCTO INIT
DESCRIPTION = " Manager Modules"
PR = "r21"

DEPENDS = "diag dsutils qmi-framework data"

S       =  "${WORKDIR}/manager"
SRC_DIR =  "${WORKSPACE}/manager/"

INITSCRIPT_NAME = "start_manager_server_le"
INITSCRIPT_PARAMS = "start 99 2 3 4 5 ."

inherit update-rc.d

do_install_append() {
    install -m 0755 ${WORKDIR}/manager/server/src/start_manager_server_le -D ${D}${sysconfdir}/init.d/start_manager_server_le

}

FILES_${PN} += "${base_libdir}/firmware/wlan/qca_cld"

PN菜谱名称
echo 30000 >  /proc/sys/vm/min_free_kbytes
内存管理
生成文件系统类型
IMAGE_FSTYPES+=" cpio.gz cpio tar.gz cpio.gz cpio tar.gz jffs2 ext2 ext3 ext4 ubifs"
#BB_NO_NETWORK = "1"

UBI_VOLNAME = "rootfs"
MKUBIFS_ARGS = "-F -m 2048 -e 126976 -c 784"
#UBINIZE_ARGS = "-m 2048 -p 128KiB -s 2048 -O 2048"

gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0 latency=10 ! queue ! rtph264depay ! vpudec ! imxg2dvideosink window-width=960 window-height=480 window-y-coord=480

fw_printenv

314 repo命令
repo init -u https://gitee.com/aosta/fsl-arm-yocto-bsp.git -b nxp/imx-3.14.28-1.0.0_ga
repo sync
MACHINE=imx6dlsabresd source fsl-setup-release.sh -b build-fb -e fb

419
repo init --repo-url=https://mirrors.tuna.tsinghua.edu.cn/git/git-repo -u https://github.com/nxp-imx/imx-manifest -b imx-linux-warrior -m imx-4.19.35-1.1.1.xml
MACHINE=imx6dlsabresd source fsl-setup-release.sh -b build-fb -e fb

MACHINE=imx6dlsabresd DISTRO=fsl-imx-fb source ./fsl-setup-release.sh -b fb
MACHINE=imx6dlsabresd source fsl-setup-release.sh -b build-x11 -e x11
m4-native
//#elif HAVE_LIBSIGSEGV && SIGSTKSZ < 16384
/* libsigsegv 2.6 through 2.8 have a bug where some architectures use
   more than the Linux default of an 8k alternate stack when deciding
   if a fault was caused by stack overflow.  */
//# undef SIGSTKSZ
//# define SIGSTKSZ 16384


_MKNOD_VER _STAT_VER

/usr/include/x86_64-linux-gnu/bits/stat.h 22行
#ifndef _BITS_STAT_H
#define _BITS_STAT_H    1
#define _STAT_VER_KERNEL 0
#define _STAT_VER_LINUX 1
#define _MKNOD_VER_LINUX 0
#define _STAT_VER _STAT_VER_LINUX
#define _MKNOD_VER _MKNOD_VER_LINUX
#include <bits/struct_stat.h>

util-linux-native
configure: error: raw selected, but required raw.h header file not available
--disable-raw
#include <sys/sysmacros.h>

qemu-native syscall.c
#include <linux/sockios.h>


| gawk: fatal: cannot use gawk builtin `namespace' as variable name
namespace 替换为pkg_namespace

gpgme-native 
修改src/posix-io.c
#if defined(__sun) || defined(__FreeBSD__) || defined(__GLIBC__)
            closefrom (fd);
            max_fds = fd;
#else /*!__sun */
            while ((i = closefrom (fd)) && errno == EINTR)
            
nfs搭建            
sudo systemctl  enable nfs-kernel-server

ubuntu22
setenv serverip '192.168.1.173'
setenv nfsroot '/home/z/zty/a9/256/hm/qt4e-rootfs'
setenv bootcmd_mmcnet 'mmc dev ${mmcdev};run loadimage;run bootcmd_nfs;run loadfdt;bootz ${loadaddr} - ${fdt_addr}'
setenv bootcmd_nfs 'setenv bootargs console=${console},${baudrate} root=/dev/nfs rootwait rw ${pridis} ${secdis} ip=${ipaddr} nfsroot=${serverip}:${nfsroot},v3,tcp'


fbcon.c fbcon_init函数
vc->vc_y = 9;


gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0  tune=zerolatency ! rtph264depay ! queue max-size-buffers=0 max-size-bytes=0 max-size-time=40000 ! queue max-size-time=4000000 min-threshold-time=4000000 ! vpudec ! autovideosink sync=false


gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0  ! queue max-size-buffers=0 max-size-bytes=0 max-size-time=0 ! rtph264depay !  vpudec ! autovideosink sync=false

gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0  latency=2  ! rtph264depay ! queue max-size-buffers=0 max-size-bytes=0 max-size-time=900000 ! queue max-size-time=900000 min-threshold-time=400000 ! vpudec ! autovideosink sync=false

 bear --library /usr/lib/x86_64-linux-gnu/bear/libexec.so make ARCH=arm CROSS_CMOPILE=arm-linux-gnueabi- zImage  -j 32
 
 
 gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0  latency=2  ! rtph264depay ! queue max-size-buffers=0 max-size-bytes=0 max-size-time=9000000  leaky=0 ! vpudec ! autovideosink sync=false
 
 
 static int mxcfb_map_video_memory(struct fb_info *fbi)
 framebuffer 分配物理内存
 
 mxcfb_set_par->mxcfb_register->mxcfb_probe
 
 udevadm info -a -n /dev/sdb 
 显示udev的event事件
 
 ifup 会查看/var/run/ifstate的文件已确定
 
 制作文件系统时注意run tmp等临时文件的生成，挂载模式为tmpfs
 
 
 libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-plugins-bad1.0-dev gstreamer1.0-plugins-base gstreamer1.0-plugins-good gstreamer1.0-plugins-bad gstreamer1.0-plugins-ugly gstreamer1.0-libav gstreamer1.0-tools gstreamer1.0-x gstreamer1.0-alsa gstreamer1.0-gl gstreamer1.0-gtk3 gstreamer1.0-qt5 gstreamer1.0-pulseaudio
 
 gst-launch-1.0 playbin uri=rtsp://192.168.1.108:554/id=1&type=0
 
 gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0 latency=8 ! rtph264depay  ! autovideosink sync=false



gst-launch-1.0 rtspsrc location='rtsp://169.254.1.168/0' ! rtph264depay ! h264parse ! avdec_h264 ! videoconvert ! xvimagesink

GST_DEBUG_NO_COLOR=1 GST_DEBUG_FILE=pipeline.log GST_DEBUG=5 gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0 latency=8 ! rtph264depay ! vpudec ! autovideosink sync=false

-pthread -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include -I/usr/include/gstreamer-0.10 -I/usr/include/libxml2  -pthread -lgstreamer-0.10 -lgobject-2.0 -lgmodule-2.0 -lxml2 -lgthread-2.0 -lrt -lglib-2.0

gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0 protocols=tcp ! rtph264depay ! vpudec ! autovideosink sync=false

gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0 latency=800  ! rtph264depay ! vpudec ! autovideosink sync=false

eceived new pad 'recv_rtp_src_0_403447416_96' from 'rtspsrc':
zty parsing property latency as a guint 28!
  printf("zty rtspsrc change state 10!\n", GST_STATE_CHANGE_NULL_TO_READY);
  printf("zty rtspsrc change state 19!\n", GST_STATE_CHANGE_READY_TO_PAUSED);
  printf("zty rtspsrc change state 28!\n", GST_STATE_CHANGE_PAUSED_TO_PLAYING);
  printf("zty rtspsrc change state 35!\n", GST_STATE_CHANGE_PLAYING_TO_PAUSED);
  printf("zty rtspsrc change state 26!\n", GST_STATE_CHANGE_PAUSED_TO_READY);
  
 zty rtspsrc change state 10!
zty rtspsrc change state 19!
zty rtspsrc change state 28!
zty rtspsrc change state 35!
zty rtspsrc change state 26!

 {C_FLAGS (GST_MESSAGE_UNKNOWN), "GST_MESSAGE_UNKNOWN", "unknown"},
    {C_FLAGS (GST_MESSAGE_EOS), "GST_MESSAGE_EOS", "eos"},
    {C_FLAGS (GST_MESSAGE_ERROR), "GST_MESSAGE_ERROR", "error"},
    {C_FLAGS (GST_MESSAGE_WARNING), "GST_MESSAGE_WARNING", "warning"},
    {C_FLAGS (GST_MESSAGE_INFO), "GST_MESSAGE_INFO", "info"},
    {C_FLAGS (GST_MESSAGE_TAG), "GST_MESSAGE_TAG", "tag"},
    {C_FLAGS (GST_MESSAGE_BUFFERING), "GST_MESSAGE_BUFFERING", "buffering"},
    {C_FLAGS (GST_MESSAGE_STATE_CHANGED), "GST_MESSAGE_STATE_CHANGED",
        "state-changed"},
    {C_FLAGS (GST_MESSAGE_STATE_DIRTY), "GST_MESSAGE_STATE_DIRTY",
        "state-dirty"},
    {C_FLAGS (GST_MESSAGE_STEP_DONE), "GST_MESSAGE_STEP_DONE", "step-done"},
    {C_FLAGS (GST_MESSAGE_CLOCK_PROVIDE), "GST_MESSAGE_CLOCK_PROVIDE",
        "clock-provide"},
    {C_FLAGS (GST_MESSAGE_CLOCK_LOST), "GST_MESSAGE_CLOCK_LOST", "clock-lost"},
    {C_FLAGS (GST_MESSAGE_NEW_CLOCK), "GST_MESSAGE_NEW_CLOCK", "new-clock"},
    {C_FLAGS (GST_MESSAGE_STRUCTURE_CHANGE), "GST_MESSAGE_STRUCTURE_CHANGE",
        "structure-change"},
    {C_FLAGS (GST_MESSAGE_STREAM_STATUS), "GST_MESSAGE_STREAM_STATUS",
        "stream-status"},
    {C_FLAGS (GST_MESSAGE_APPLICATION), "GST_MESSAGE_APPLICATION",
        "application"},
    {C_FLAGS (GST_MESSAGE_ELEMENT), "GST_MESSAGE_ELEMENT", "element"},
    {C_FLAGS (GST_MESSAGE_SEGMENT_START), "GST_MESSAGE_SEGMENT_START",
        "segment-start"},
    {C_FLAGS (GST_MESSAGE_SEGMENT_DONE), "GST_MESSAGE_SEGMENT_DONE",
        "segment-done"},
    {C_FLAGS (GST_MESSAGE_DURATION_CHANGED), "GST_MESSAGE_DURATION_CHANGED",
        "duration-changed"},
    {C_FLAGS (GST_MESSAGE_LATENCY), "GST_MESSAGE_LATENCY", "latency"},
    {C_FLAGS (GST_MESSAGE_ASYNC_START), "GST_MESSAGE_ASYNC_START",
        "async-start"},
    {C_FLAGS (GST_MESSAGE_ASYNC_DONE), "GST_MESSAGE_ASYNC_DONE", "async-done"},
    {C_FLAGS (GST_MESSAGE_REQUEST_STATE), "GST_MESSAGE_REQUEST_STATE",
        "request-state"},
    {C_FLAGS (GST_MESSAGE_STEP_START), "GST_MESSAGE_STEP_START", "step-start"},
    {C_FLAGS (GST_MESSAGE_QOS), "GST_MESSAGE_QOS", "qos"},
    {C_FLAGS (GST_MESSAGE_PROGRESS), "GST_MESSAGE_PROGRESS", "progress"},
    {C_FLAGS (GST_MESSAGE_TOC), "GST_MESSAGE_TOC", "toc"},
    {C_FLAGS (GST_MESSAGE_RESET_TIME), "GST_MESSAGE_RESET_TIME", "reset-time"},
    {C_FLAGS (GST_MESSAGE_STREAM_START), "GST_MESSAGE_STREAM_START",
        "stream-start"},
    {C_FLAGS (GST_MESSAGE_NEED_CONTEXT), "GST_MESSAGE_NEED_CONTEXT",
        "need-context"},
    {C_FLAGS (GST_MESSAGE_HAVE_CONTEXT), "GST_MESSAGE_HAVE_CONTEXT",
        "have-context"},
    {C_FLAGS (GST_MESSAGE_EXTENDED), "GST_MESSAGE_EXTENDED", "extended"},
    {C_FLAGS (GST_MESSAGE_DEVICE_ADDED), "GST_MESSAGE_DEVICE_ADDED",
        "device-added"},
    {C_FLAGS (GST_MESSAGE_DEVICE_REMOVED), "GST_MESSAGE_DEVICE_REMOVED",
        "device-removed"},
    {C_FLAGS (GST_MESSAGE_ANY), "GST_MESSAGE_ANY", "any"},
    {0, NULL, NULL}
GST_DEBUG=4 gst-launch-1.0 rtspsrc location=rtsp://169.254.1.168/0  ! rtph264depay ! vpudec ! autovideosink sync=false

zty gst base 0x769c9714f, pushdrc 0x755bc1d0f!
zty gst base 0x76a40714f, pushdrc 0x74fba1d0f!
zty bclass create name 0x76a40714f

client-H264-PCMA.sh
GstElementFactory
GST_OBJECT_NAME (factory)
g_type_name
route add -net 192.168.127.141 netmask 255.255.255.255 gw 169.254.1.197 eth1


 g_object_get (G_OBJECT (stream->udpsrc[0]), "used-socket", &socket, NULL);
  printf("zty auto buffering mode, have clock %" GST_PTR_FORMAT, src->provided_clock);
  
  "zty gst_parse_found_pad add pad handler
  
  
  rtspsrc location=rtsp://169.254.1.168/0  ! rtph264depay ! vpudec ! autovideosink sync=true
  
  gst_buffer_memcmp
  
  static gboolean
memcmp_buffers (GstBuffer * buf1, GstBuffer * buf2)
{
  gsize size1, size2;
  gboolean res;
  GstMapInfo map;

  size1 = gst_buffer_get_size (buf1);
  size2 = gst_buffer_get_size (buf2);

  if (size1 != size2)
    return FALSE;

  gst_buffer_map (buf1, &map, GST_MAP_READ);
  res = gst_buffer_memcmp (buf2, 0, map.data, map.size) == 0;
  gst_buffer_unmap (buf1, &map);

  return res;
}

(basesrc,
        "startup PTS: %" GST_TIME_FORMAT ", DTS %" GST_TIME_FORMAT
        ", running_time %" GST_TIME_FORMAT, GST_TIME_ARGS (pts),
        GST_TIME_ARGS (dts), GST_TIME_ARGS (running_time));
gstreamer1.0-plugins-base


GST_PAD_PARENT

bitbake gstreamer1.0 -C compile

bitbake gstreamer1.0-plugins-good -C compile
bitbake gstreamer1.0-plugins-base -C compile

/home/leno/yocto/a9/314/build-fb/tmp/work/cortexa9hf-vfp-neon-poky-linux-gnueabi/gstreamer1.0-plugins-good/1.4.1-r0
/home/leno/yocto/a9/314/build-fb/tmp/work/cortexa9hf-vfp-neon-poky-linux-gnueabi/gstreamer1.0/1.4.1-r0
scp  -r image/usr/* root@169.254.1.219:/usr/
/home/z/zty/a9/xianshi/gst-vpu-c/build-gstdisp-arm_poky_qt4_8_6-Debug
GST_PAD_PARENT (srcpad);


tcpdump -i eth1  -w file.cap

  printf("zty ssrc demux pad %s farent name %s!\n", GST_PAD_NAME(pad), GST_OBJECT_NAME(parent));

		if(gst_pad_is_linked(pad))
    {
      GstPad * ztypad = gst_pad_get_peer(pad);
      printf("zty pad linked name %s farent name %s!\n", GST_PAD_NAME(ztypad), GST_OBJECT_NAME(GST_PAD_PARENT(ztypad)));
    }
    else
      printf("zty pad no linked!\n");
rtph264depay
 GST_PAD_CHAINFUNC (pad) = chain;
 
 
 gst1.0-fsl-plugin
tc qdisc add dev eth0 root netem loss 1%
tc qdisc change dev eth1 root netem loss 1%
gst_object_dispatch_properties_changed


gst_rtp_base_depayload_chain


gst_rtp_session_chain_recv_rtp接收数据主要添加各种时间
gst_rtp_ssrc_demux_chain   ssrc管理
gst_rtp_jitter_buffer_chain 存放与buffer


gst_rtp_h264_depay_process h264数据处理

zty Get codec std 6zty Get codec std 6 ramerate_n 0 framerate_d 1!
zty nChromaInterleave 1 output_format_decided  23!
zty nPicWidth 0 nPicHeight  0!
zty  gst no exit!
zty get message src name  pipeline0!
zty get message  name  stream-start!
[INFO]  bitstreamMode 1, chromaInterleave 1, mapType 0, tiled2LinearEnable 0

gst_rtp_base_depayload_chain
h264解码分析rtph264depay0
decide_allocation后续研究
gstvideodecoder.c
 vdec_class->handle_frame = GST_DEBUG_FUNCPTR (gst_vpu_dec_handle_frame);
gst_vpu_dec_object_decode
gst_vpu_dec_object_decode vpu解码处理函数

gst_allocator_alloc分配内存

#define G_OBJECT_TYPE_NAME(object)  (g_type_name (G_OBJECT_TYPE (object)))

gst_vpu_dec_object_open VPU_DecLoad 仅仅loadvpuVPU_DecLoad
gst_vpu_dec_start->gst_vpu_dec_object_start ->VPU_DecGetVersionInfo
					    ->VPU_DecGetWrapperVersionInfo
					    ->VPU_DecQueryMem
					    ->gst_vpu_allocate_internal_mem申请了两个buf->gst_vpu_alloc_phys_mem->VPU_DecGetMem
state = STATE_ALLOCATED_INTERNAL_BUFFER

gst_vpu_dec_set_format应该是收到sps和pps帧的响应函数->gst_vpu_dec_object_config ->  
gst_vpu_dec_object_open_vpu->gst_vpu_dec_object_set_vpu_param设置参数信息
			   ->VPU_DecOpen
			   ->VPU_DecGetCapability
			   ->VPU_DecConfig
	state = STATE_OPENED

gst_vpu_dec_handle_frame->gst_vpu_dec_object_decode->gst_vpu_dec_object_set_vpu_input_buf放数据
                                                   ->VPU_DecDecodeBuf解码
                                                   ->gst_vpu_dec_object_handle_reconfig重配->VPU_DecGetInitialInfo
                                                                                         ->gst_vpu_dec_object_allocate_mv_buffer
                                                   
                                                   gst_vpu_dec_object_send_output ->gst_video_decoder_finish_frame




VPU_DecRegisterFrameBuffer 该函数跟显示相关。




gst_rtp_h264_depay_process gst_rtp_h264_depay_add_sps_pps




gst_video_decoder_chain caps 会调用set_format


VpuConvertAvccHeader();

pps_id为 pic_parameter_set_id，表示当前pps的id，某个pps在码流中会被相应的slice引用。slice引用pps的方式就是在slice header中保存pps的 id。

sps_id为 seq_parameter_set_id，表示当前sps的id。被pps引用，在pps中带有所引用的sps的id。


/opt/poky/1.7/sysroots/cortexa9hf-vfp-neon-poky-linux-gnueabi/usr   imx-gpu-viv

gst_video_decoder_negotiate_default协商
g_type_name_from_instance GTypeInstance
g_type_name_from_class GTypeClass
g_type_name GType

GST_API
GType           gst_mini_object_get_type   (void);

gst_object_get_name

do_alloc_buffer
default_alloc_buffer

#define GST_VIDEO_INFO_COMP_STRIDE(i,c)  GST_VIDEO_FORMAT_INFO_STRIDE((i)->finfo,(i)->stride,(c))
#define GST_VIDEO_FORMAT_INFO_STRIDE(info,strides,comp) ((strides)[(info)->plane[comp]])

    PhyMemBlock * mem_block;
    mem_block = gst_buffer_query_phymem_block (buffer);

    printf("zty mem_block phy memblk size %d vaddr 0x%x paddr 0x%x!\n", mem_block->size, mem_block->vaddr, mem_block->paddr);
    
    imx_video_convert_transform_frame
    imx_g2d_do_convert
     gst_video_sink_class_init->gst_video_sink_show_frame->调用render gst_overlay_sink_show_frame 
gst_imx_v4l2_get_device_caps


gst_video_filter_class_init->gst_video_filter_transform


compositor_do_compositing_surface_list osink_object_enable_display

gst_overlay_sink_change_state


uapi/linux/将其拷贝到poky中
imx_ipu_v4l2out_config_input
imx_ipu_v4l2out_config_output v4l2out_config_output
imx_ipu_v4l2out_config_rotate
imx_ipu_v4l2_config_alpha

gst_vpu_dec_open
gst_overlay_sink_change_state ->GST_STATE_CHANGE_READY_TO_PAUSED ->
osink_object_enable_display->init_display -> gst_imx_v4l2_open_device
			   ->compositor_device_open打开转码设备
			   ->create_compositor 初始化转码器 有一个线程compositor_compositing_thread

gst_imx_v4l2src_create没有作用

osink_object_get_compositor_dst_buffer
osink_object_flip_compositor_dst_buffer

GST_STATE_CHANGE_PAUSED_TO_PLAYING

gst_overlay_sink_show_frame
flip_display_buffer

gst_base_sink_chain_unlocked->gst_video_sink_show_frame->调用render gst_overlay_sink_show_frame 
->osink_object_update_overlay->compositor_update_surface->compositor_do_compositing_surface_list
         ->osink_object_get_compositor_dst_buffer->get_next_display_buffer ->gst_imx_v4l2_dequeue_v4l2memblk
         ->compositor_device_blit_surface
	->osink_object_flip_compositor_dst_buffer->flip_display_buffer->gst_imx_v4l2_queue_v4l2memblk->imx_v4l2_do_queue_buffer
	
	
	
	
	gst_vpu_dec_object_release_frame_buffer_to_vpu
	g2d_device_blit_surface
	
	
sudo dpkg-reconfigure lightdm

修改网络透传问题。
net.ipv4.conf.eth1.arp_ignore = 1
cat /proc/sys/net/ipv4/conf/eth1/arp_ignore
setsockopt(sock_fd, SOL_SOCKET, SO_NO_CHECK, (void*)&disable, sizeof(disable)

netstat -su
cat /proc/sys/net/core/rmem_max 网络接收buf缓存

pulseaudio是用户层的混合器在系统层运行pulseaudio --system需要修改
pulse文件夹下的client.conf autospawn = no
              system.pa load-module module-native-protocol-unix auth-anonymous=1
              

cat /proc/sys/net/ipv4/neigh/ens160/locktime
只读
hdparm -r0 /dev/sdd


amixer contents 显示音频信息

amixer cset numid=95,iface=MIXER,name='Right PGA Mixer Mic3L Switch' 0

amixer cget numid=103,iface=MIXER,name='Left PGA Mixer Mic3L Switch'

amixer cset numid=103,iface=MIXER,name='Left PGA Mixer Mic3L Switch' 1

amixer cset numid=104,iface=MIXER,name='Left PGA Mixer Mic3R Switch' 0

cat /sys/fsl_otp/HW_OCOTP_MAC0

amixer cget numid=107,iface=MIXER,name='Left HPCOM Mux'

amixer cset numid=107,iface=MIXER,name='Left HPCOM Mux' 1
amixer cset numid=100,iface=MIXER,name='Left PGA Mixer Line1L Switch' 0
amixer cget numid=102,iface=MIXER,name='Left PGA Mixer Line2L Switch' 1
amixer cget numid=92,iface=MIXER,name='Right PGA Mixer Line1R Switch'
Line1R Switch
Left PGA Mixer Line1L Switch open
Right PGA Mixer Line1R Switch

amixer cset numid=44,iface=MIXER,name='PGA Capture Volume' 110,110
amixer cget numid=44,iface=MIXER,name='PGA Capture Volume'

qt 相关
message($$QT_ARCH)
contains(QT_ARCH, aarch64)

git子模组同步
git submodule update --init --recursive

DISTRO=fsl-imx-x11 MACHINE=imx6dlsabresd source fsl-setup-release.sh -b build-x11
https://wiki.phytec.com/pages/viewpage.action?pageId=173541239



export QT_QWS_FONTDIR=/usr/lib/qt4x11/fonts
export LD_LIBRARY_PATH=/usr/lib/qt4x11/lib/
export QTDIR=/usr/lib/qt4x11/lib/
export QTEDIR=$QTDIR
export QT_PLUGIN_PATH=/usr/lib/qt4x11/lib/qt4/plugins
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/opt/bin/
export DISPLAY=:0
meta-extsdk-toolchain                                 :1.0-r0                          
meta-go-toolchain                                     :1.0-r0                          
meta-toolchain                                        :1.0-r7                          
meta-toolchain-qt                                     :1.0-r7                          
meta-toolchain-qt5                                    :1.0-r0                          
meta-toolchain-qte                                    :1.0-r7                          
nativesdk-icecc-toolchain                             :0.1-r0                          
nativesdk-packagegroup-qt-toolchain-host                  :1.0-r12                          
nativesdk-packagegroup-qt5-toolchain-host                   :1.0-r0                          
nativesdk-packagegroup-qte-toolchain-host                  :1.0-r12                          
packagegroup-qt-toolchain-target                      :1.0-r0                          
packagegroup-qt5-toolchain-target                     :1.0-r0                          
packagegroup-qte-toolchain-target                     :1.0-r7  
git config --global credential.helper store

ignore_rlimit_data 堆限制 初步 root@imx6dlsabresd:/sys/module/kernel/parameters#位


mkdir $(date +%Y-%m-%d_%H:%M)

echo 1 > /proc/sys/kernel/panic
kernel.panic = 10

voip
bitbake mediastreamer2 -C compile


python () {
    if d.getVar('LATEST_REVISIONS', True) == "1":
        d.setVar('SRCREV', '${AUTOREV}')
    else:
        d.setVar('SRCREV', '28630af81fdbeed5794722c3323999ae71fb06a3')
}
python () {
    print("")
    print("mediastreamer2")
    print(d.getVar('SRCREV', True))
}


ffmpeg -y  -f  image2   -i 00%d.jpg   -c:v libx264   -r 30   video1.mp4
ffmpeg -i video2.mp4 -vcodec h264 output.h264

gnome-control-center
ldd /lib/x86_64-linux-gnu/libxslt.so.1
ll /usr/local/lib/libxml2.so.2
ll /lib/x86_64-linux-gnu/libxml2.so.2
cd /usr/local/lib/
ls
sudo mv libxml2.so.2 libxml2.so.2ffff
sudo ln -sf /lib/x86_64-linux-gnu/libxml2.so.2 libxml2.so.2

IMAGE_INSTALL += "\
	${CORE_IMAGE_BASE_INSTALL} \
	packagegroup-core-qt4e \
	rsync \
	tcpdump \
	packagegroup-fsl-gstreamer1.0 \
	htop \
	packagegroup-fsl-tools-testapps \
	openssh \
	icu \
	haveged \
	vsftpd \
"

工具链修改meta-toolchain-qt.inc
TOOLCHAIN_TARGET_TASK = "packagegroup-${QTNAME}-toolchain-target packagegroup-fsl-gstreamer1.0 breakpad"


